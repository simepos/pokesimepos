using System;
using System.Drawing;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PokeAPI;

namespace PokedexGeneratorV2
{
    class Program
    {
        static readonly Size CardSize = new Size(250, 515);
        static readonly int RoundedRectangleRadius = 8;
        static readonly Rectangle CardBorderRectangle = new Rectangle(2, 2, CardSize.Width - 5, CardSize.Height - 5);
        static readonly Rectangle ImageBorderRectangle = new Rectangle(10, 10, CardSize.Width - 20, CardSize.Width - 20);
        static readonly Rectangle ImageRectangle = new Rectangle(ImageBorderRectangle.X + 2, ImageBorderRectangle.Y + 2, ImageBorderRectangle.Width - 4, ImageBorderRectangle.Height - 4);
        static readonly Point TypePosition = new Point(ImageRectangle.X + ImageRectangle.Width / 2, ImageRectangle.Y + ImageRectangle.Height);
        static readonly Point NamePosition = new Point(CardSize.Width / 2, 270);
        static readonly Point StatPosition = new Point(CardSize.Width / 2, 285);
        static readonly Point AbilityPosition = new Point(CardSize.Width / 2, 430);
        static readonly Font titleFont = new Font("Berlin Sans FB", 16);
        static readonly Font txtFont = new Font("Berlin Sans FB", 12);
        static readonly SolidBrush goldYellow = new SolidBrush(Color.LightGoldenrodYellow);
        static readonly int FirstStatYPosition = 310;
        static readonly int FirstAbilityYPosition = 450;

        static readonly Dictionary<string, Color> PokemonTypeColors = new Dictionary<string, Color>() {
            {"flying",      getColorFromRGBString("A890F0") },
            {"bug",         getColorFromRGBString("A8B820") },
            {"dark",        getColorFromRGBString("705848") },
            {"dragon",      getColorFromRGBString("7038F8") },
            {"electric",    getColorFromRGBString("F8D030") },
            {"fairy",       getColorFromRGBString("EE99AC") },
            {"fighting",    getColorFromRGBString("C03028") },
            {"fire",        getColorFromRGBString("F08030") },
            {"ghost",       getColorFromRGBString("705898") },
            {"grass",       getColorFromRGBString("78C850") },
            {"ground",      getColorFromRGBString("E0C068") },
            {"ice",         getColorFromRGBString("98D8D8") },
            {"water",       getColorFromRGBString("6890F0") },
            {"steel",       getColorFromRGBString("B8B8D0") },
            {"rock",        getColorFromRGBString("B8A038") },
            {"psychic",     getColorFromRGBString("F85888") },
            {"poison",      getColorFromRGBString("A040A0") },
            {"normal",      getColorFromRGBString("A8A878") }
        };


        static void Main(string[] args)
        {
			int nbPokemon = 809;
            bool export = false;

            do
            {
                bool valid = false;
                int pkmnNb;
                do {
                    Console.WriteLine("Entrez l'ID du pokemon à imprimer :");
                    string input = Console.ReadLine();
                    
                    if (int.TryParse(input, out pkmnNb) && pkmnNb > 0 && pkmnNb < 809)
                    {
                        valid = true;
                    }
                } while (!valid);

                for (int i=1; i<nbPokemon; i++)
                {
					
                    PokemonSpecies pkmnSpecies = DataFetcher.GetApiObject<PokemonSpecies>(i).Result;

                    foreach (PokemonSpeciesVariety pkmnSpeciesVariety in pkmnSpecies.Varieties)
                    {
                        Pokemon pkmn = pkmnSpeciesVariety.Pokemon.GetObject().Result;
                        if (pkmn.ID == pkmnNb)
                        {
                            export = true;
                            ProcessPokemon(pkmnSpecies, pkmn, "./export/");
                            break;
                        }
                    }
                    if (export)
                    {
                        break;
                    }
                }
                if (export)
                {
                    Console.WriteLine("Exportation réussie! \nDésirez-vous exporter un autre pokemon? (O/o ou N/n)");
                    string confirm = Console.ReadLine();
                    confirm = confirm.ToUpper();
                    if (confirm == "O")
                    {
                        export = false;
                    }
                }
            } while (!export);
        }

        static Color getColorFromRGBString(string RGBString)
        {
            int R = int.Parse(RGBString.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);
            int G = int.Parse(RGBString.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);
            int B = int.Parse(RGBString.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);

            return Color.FromArgb(R, G, B);
        }

        static void ProcessPokemon(PokemonSpecies pkmnSpecies, Pokemon pkmn, string savePath)
        {
            Bitmap pkmnImage = new Bitmap(CardSize.Width, CardSize.Height);
            Graphics canvas = Graphics.FromImage(pkmnImage);

            DrawBackground(pkmn, canvas);
            DrawBorders(pkmn, canvas);
            DrawImage(pkmnSpecies, pkmn, canvas);
            DrawTypes(pkmn, canvas);
            DrawText(pkmn, canvas);
            DrawStats(pkmn, canvas);
            DrawAbilities(pkmn, canvas);

            GenerateImageFile(pkmnSpecies, pkmn, pkmnImage, savePath);
        }

        private static void GenerateImageFile(PokemonSpecies pkmnSpecies, Pokemon pkmn, Bitmap pkmnImage, string savePath)
        {
            if (!System.IO.Directory.Exists(savePath))
            {
                System.IO.Directory.CreateDirectory(savePath);
            }
            string pkmnFileName = pkmnSpecies.ID.ToString("D3") + "-" + pkmn.Name + ".png";
            pkmnImage.Save(savePath + pkmnFileName, System.Drawing.Imaging.ImageFormat.Png);
        }

        private static void DrawStats(Pokemon pkmn, Graphics canvas)
        {
            StringFormat format = new StringFormat();
            format.Alignment = StringAlignment.Center;

            canvas.DrawString("STATISTICS", txtFont, goldYellow, StatPosition, format);

            foreach (PokemonStats stat in pkmn.Stats)
            {
                string nomStat = stat.Stat.Name;

                Brush statColor;
                int positionY = FirstStatYPosition;
                string displayStat;

                switch (nomStat)
                {
                    case "hp":
                        displayStat = "Hp : ";
                        statColor = Brushes.Red;
                        break;
                    case "attack":
                        displayStat = "Atk : ";
                        positionY += 20;
                        statColor = Brushes.DarkOrange;
                        break;
                    case "special-attack":
                        displayStat = "Sp.atk : ";
                        positionY += 40;
                        statColor = Brushes.Gold;
                        break;
                    case "defense":
                        displayStat = "Def : ";
                        positionY += 60;
                        statColor = Brushes.RoyalBlue;
                        break;
                    case "special-defense":
                        displayStat = "Sp. def : ";
                        positionY += 80;
                        statColor = Brushes.LimeGreen;
                        break;
                    case "speed":
                        displayStat = "Speed : ";
                        positionY += 100;
                        statColor = Brushes.HotPink;
                        break;
                    default:
                        displayStat = "Erreur";
                        positionY = 800;
                        statColor = Brushes.Black;
                        break;

                }
                displayStat += stat.BaseValue;
                canvas.DrawString(displayStat, txtFont, goldYellow, 5, positionY);
                Rectangle bande = new Rectangle(90, positionY, (stat.BaseValue > 150 ? 150 : stat.BaseValue), 15);
                Rectangle bordure = new Rectangle(90, positionY, 150, 15);
                Pen bordureColor = new Pen(Brushes.Black);
                canvas.FillRectangle(statColor, bande);
                canvas.DrawRectangle(bordureColor, bordure);
            }
        }

        private static void DrawAbilities(Pokemon pkmn, Graphics canvas)
        {
            StringFormat format = new StringFormat();
            format.Alignment = StringAlignment.Center;

            canvas.DrawString("ABILITIES", txtFont, goldYellow, AbilityPosition, format);

            int positionY = FirstAbilityYPosition;
            foreach (PokemonAbility ability in pkmn.Abilities) {
                string txtAbility = char.ToUpper(ability.Ability.Name[0]) + ability.Ability.Name.Substring(1);
                canvas.DrawString(txtAbility, txtFont, goldYellow, 5, positionY);
                positionY += 20;
            }
        }

        private static void DrawText(Pokemon pkmn, Graphics canvas)
        {
            string txt = "# " + pkmn.ID + " - " + char.ToUpper(pkmn.Name[0]) + pkmn.Name.Substring(1);
            StringFormat format = new StringFormat();
            format.Alignment = StringAlignment.Center;
            format.LineAlignment = StringAlignment.Center;

            canvas.DrawString(txt, titleFont, goldYellow, NamePosition, format);
        }

        private static void DrawTypes(Pokemon pkmn, Graphics canvas)
        {
            if (pkmn.Types.Length == 2)
            {
                Bitmap bmpType1 = (Bitmap)PokemonTypeIcons.ResourceManager.GetObject(pkmn.Types[1].Type.Name);
                Bitmap bmpType2 = (Bitmap)PokemonTypeIcons.ResourceManager.GetObject(pkmn.Types[0].Type.Name);

                canvas.DrawImage(bmpType1, new Point(TypePosition.X - 34, TypePosition.Y));
                canvas.DrawImage(bmpType2, new Point(TypePosition.X + 2, TypePosition.Y));
            }
            else
            {
                Bitmap bmpType1 = (Bitmap)PokemonTypeIcons.ResourceManager.GetObject(pkmn.Types[0].Type.Name);
                canvas.DrawImage(bmpType1, new Point(TypePosition.X - 16, TypePosition.Y));
            }
        }

        private static void DrawImage(PokemonSpecies pkmnSpecies, Pokemon pkmn, Graphics canvas)
        {
            Image lImage;
            string fileName = @".\Assets\PokemonArtwork\" + pkmn.Name.Replace(pkmnSpecies.Name, pkmnSpecies.ID.ToString()) + ".png";
            if (System.IO.File.Exists(fileName))
            {
                lImage = Bitmap.FromFile(fileName);
            }
            else
            {
                fileName = @".\Assets\PokemonSprites\" + pkmn.Name.Replace(pkmnSpecies.Name, pkmnSpecies.ID.ToString()) + ".png";
                if (System.IO.File.Exists(fileName))
                {
                    lImage = Bitmap.FromFile(fileName);
                }
                else
                {
                    fileName = "";
                    if (System.IO.File.Exists(fileName))
                    {
                        lImage = Bitmap.FromFile(fileName);
                    }
                    else
                    {
                        lImage = new Bitmap(ImageRectangle.Width, ImageRectangle.Height);
                    }
                }
            }

            canvas.DrawImage(lImage, ImageRectangle);
        }

        private static void DrawBorders(Pokemon pkmn, Graphics canvas)
        {
            Pen p = new Pen(Brushes.LightGoldenrodYellow);
            p.Width = 2;
            p.Alignment = System.Drawing.Drawing2D.PenAlignment.Inset;

            canvas.DrawRoundedRectangle(p, CardBorderRectangle, RoundedRectangleRadius);

            canvas.DrawRoundedRectangle(p, ImageBorderRectangle, RoundedRectangleRadius);
        }

        private static void DrawBackground(Pokemon pkmn, Graphics canvas)
        {
            Brush theBrush;
            if (pkmn.Types.Length == 2)
            {
                System.Drawing.Drawing2D.LinearGradientBrush lgb = new System.Drawing.Drawing2D.LinearGradientBrush(new Rectangle(new Point(0, 0), CardSize), PokemonTypeColors[pkmn.Types[1].Type.Name], PokemonTypeColors[pkmn.Types[0].Type.Name], 0.0f);
                /*lgb.Blend = new System.Drawing.Drawing2D.Blend();
                lgb.Blend.Factors = new float[] { 1.0f, 0.6f, 1.0f, 0.5f };
                lgb.Blend.Positions = new float[] { 0.0f, 0.45f, 0.55f, 1.0f };
                canvas.FillRectangle(lgb, new Rectangle(new Point(0, 0), CardSize));*/
                theBrush = lgb;
            }
            else
            {
                theBrush = new SolidBrush(PokemonTypeColors[pkmn.Types[0].Type.Name]);
            }
            canvas.FillRectangle(theBrush, new Rectangle(new Point(0, 0), CardSize));
        }
    }
}
